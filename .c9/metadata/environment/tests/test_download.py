{"filter":false,"title":"test_download.py","tooltip":"/tests/test_download.py","undoManager":{"mark":18,"position":18,"stack":[[{"start":{"row":0,"column":0},"end":{"row":97,"column":0},"action":"insert","lines":["import os","import json","import pytest","from datetime import datetime","from download_lambda import download_handler","","# Creamos una clase dummy para simular la respuesta de requests.get","class DummyResponse:","    def __init__(self, status_code, text):","        self.status_code = status_code","        self.text = text","","# Función dummy que simula una respuesta exitosa (200)","def dummy_get_success(url, headers=None):","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","# Función dummy que simula una respuesta fallida (404) en una página específica","def dummy_get_failure(url, headers=None):","    if \"page=5\" in url:","        return DummyResponse(404, \"Not Found\")","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","# Creamos una clase dummy para simular el cliente S3","class DummyS3Client:","    def __init__(self):","        self.put_calls = []","    def put_object(self, Bucket, Key, Body, ContentType):","        # Almacena la información de la llamada para poder hacer aserciones","        self.put_calls.append({","            \"Bucket\": Bucket,","            \"Key\": Key,","            \"Body\": Body,","            \"ContentType\": ContentType","        })","        return {\"ResponseMetadata\": {\"HTTPStatusCode\": 200}}","","# Fixture para reemplazar el objeto s3_client del módulo con nuestro dummy","@pytest.fixture","def dummy_s3_client(monkeypatch):","    dummy = DummyS3Client()","    monkeypatch.setattr(\"download_lambda.s3_client\", dummy)","    return dummy","","# PRUEBA 1: Verificar que se genera el CSV correctamente cuando todas las páginas responden 200","def test_download_handler_success(monkeypatch, dummy_s3_client):","    # Reemplazamos requests.get con nuestra función dummy_get_success","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","    # Configuramos la variable de entorno para S3_BUCKET","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","    ","    # Ejecutamos la función de descarga sin evento (descarga_handler se ejecuta cuando no hay \"Records\")","    result = download_handler({}, None)","    ","    # Comprobamos que el status sea \"downloaded\"","    assert result[\"status\"] == \"downloaded\"","    ","    # Verificamos que se llamó una vez a put_object (para subir el HTML)","    assert len(dummy_s3_client.put_calls) == 1","    ","    # Verificamos que el nombre del archivo incluya la fecha de hoy y termine en \".html\"","    today = datetime.utcnow().strftime(\"%Y-%m-%d\")","    expected_filename = f\"{today}.html\"","    assert result[\"filename\"] == expected_filename","    ","    # Verificamos que en el Body se concatenó el contenido de 10 páginas","    body = dummy_s3_client.put_calls[0][\"Body\"]","    for page in range(1, 11):","        url = (f\"https://casas.mitula.com.co/find?operationType=sell&propertyType=mitula_studio_apartment&\"","               f\"geoId=mitula-CO-poblacion-0000014156&text=Bogot%C3%A1%2C++%28Cundinamarca%29&page={page}\")","        assert f\"Content from {url}\" in body","","# PRUEBA 2: Verificar comportamiento cuando una de las páginas falla (por ejemplo, page=5)","def test_download_handler_partial_failure(monkeypatch, dummy_s3_client, capsys):","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_failure)","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","    ","    result = download_handler({}, None)","    ","    # Se espera que se imprima un error para la página 5","    captured = capsys.readouterr().out","    assert \"Error al descargar la página 5\" in captured","    ","    # Aunque falle una página, la función sigue y retorna status \"downloaded\"","    assert result[\"status\"] == \"downloaded\"","","# PRUEBA 3: Verificar que si la variable de entorno S3_BUCKET no está definida se use un valor por defecto","def test_download_handler_default_bucket(monkeypatch, dummy_s3_client):","    # Eliminamos la variable de entorno S3_BUCKET (o la dejamos vacía)","    monkeypatch.delenv(\"S3_BUCKET\", raising=False)","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","    ","    result = download_handler({}, None)","    ","    # Como en el código se usa: os.environ.get(\"S3_BUCKET\", \"parcial\")","    # Si S3_BUCKET no existe, se debería usar \"parcial\" como bucket","    bucket_used = dummy_s3_client.put_calls[0][\"Bucket\"]","    assert bucket_used == \"parcial\"",""],"id":32}],[{"start":{"row":0,"column":0},"end":{"row":97,"column":0},"action":"remove","lines":["import os","import json","import pytest","from datetime import datetime","from download_lambda import download_handler","","# Creamos una clase dummy para simular la respuesta de requests.get","class DummyResponse:","    def __init__(self, status_code, text):","        self.status_code = status_code","        self.text = text","","# Función dummy que simula una respuesta exitosa (200)","def dummy_get_success(url, headers=None):","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","# Función dummy que simula una respuesta fallida (404) en una página específica","def dummy_get_failure(url, headers=None):","    if \"page=5\" in url:","        return DummyResponse(404, \"Not Found\")","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","# Creamos una clase dummy para simular el cliente S3","class DummyS3Client:","    def __init__(self):","        self.put_calls = []","    def put_object(self, Bucket, Key, Body, ContentType):","        # Almacena la información de la llamada para poder hacer aserciones","        self.put_calls.append({","            \"Bucket\": Bucket,","            \"Key\": Key,","            \"Body\": Body,","            \"ContentType\": ContentType","        })","        return {\"ResponseMetadata\": {\"HTTPStatusCode\": 200}}","","# Fixture para reemplazar el objeto s3_client del módulo con nuestro dummy","@pytest.fixture","def dummy_s3_client(monkeypatch):","    dummy = DummyS3Client()","    monkeypatch.setattr(\"download_lambda.s3_client\", dummy)","    return dummy","","# PRUEBA 1: Verificar que se genera el CSV correctamente cuando todas las páginas responden 200","def test_download_handler_success(monkeypatch, dummy_s3_client):","    # Reemplazamos requests.get con nuestra función dummy_get_success","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","    # Configuramos la variable de entorno para S3_BUCKET","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","    ","    # Ejecutamos la función de descarga sin evento (descarga_handler se ejecuta cuando no hay \"Records\")","    result = download_handler({}, None)","    ","    # Comprobamos que el status sea \"downloaded\"","    assert result[\"status\"] == \"downloaded\"","    ","    # Verificamos que se llamó una vez a put_object (para subir el HTML)","    assert len(dummy_s3_client.put_calls) == 1","    ","    # Verificamos que el nombre del archivo incluya la fecha de hoy y termine en \".html\"","    today = datetime.utcnow().strftime(\"%Y-%m-%d\")","    expected_filename = f\"{today}.html\"","    assert result[\"filename\"] == expected_filename","    ","    # Verificamos que en el Body se concatenó el contenido de 10 páginas","    body = dummy_s3_client.put_calls[0][\"Body\"]","    for page in range(1, 11):","        url = (f\"https://casas.mitula.com.co/find?operationType=sell&propertyType=mitula_studio_apartment&\"","               f\"geoId=mitula-CO-poblacion-0000014156&text=Bogot%C3%A1%2C++%28Cundinamarca%29&page={page}\")","        assert f\"Content from {url}\" in body","","# PRUEBA 2: Verificar comportamiento cuando una de las páginas falla (por ejemplo, page=5)","def test_download_handler_partial_failure(monkeypatch, dummy_s3_client, capsys):","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_failure)","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","    ","    result = download_handler({}, None)","    ","    # Se espera que se imprima un error para la página 5","    captured = capsys.readouterr().out","    assert \"Error al descargar la página 5\" in captured","    ","    # Aunque falle una página, la función sigue y retorna status \"downloaded\"","    assert result[\"status\"] == \"downloaded\"","","# PRUEBA 3: Verificar que si la variable de entorno S3_BUCKET no está definida se use un valor por defecto","def test_download_handler_default_bucket(monkeypatch, dummy_s3_client):","    # Eliminamos la variable de entorno S3_BUCKET (o la dejamos vacía)","    monkeypatch.delenv(\"S3_BUCKET\", raising=False)","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","    ","    result = download_handler({}, None)","    ","    # Como en el código se usa: os.environ.get(\"S3_BUCKET\", \"parcial\")","    # Si S3_BUCKET no existe, se debería usar \"parcial\" como bucket","    bucket_used = dummy_s3_client.put_calls[0][\"Bucket\"]","    assert bucket_used == \"parcial\"",""],"id":33},{"start":{"row":0,"column":0},"end":{"row":104,"column":0},"action":"insert","lines":["import sys","import os","# Insertamos la carpeta raíz al inicio de sys.path","sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\")))","","import json","import pytest","from datetime import datetime","","# Ahora sí podemos importar la función desde download_lambda.py","from download_lambda import download_handler","","# Creamos una clase dummy para simular la respuesta de requests.get","class DummyResponse:","    def __init__(self, status_code, text):","        self.status_code = status_code","        self.text = text","","# Función dummy que simula una respuesta exitosa (200)","def dummy_get_success(url, headers=None):","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","# Función dummy que simula una respuesta fallida (404) en una página específica","def dummy_get_failure(url, headers=None):","    if \"page=5\" in url:","        return DummyResponse(404, \"Not Found\")","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","# Creamos una clase dummy para simular el cliente S3","class DummyS3Client:","    def __init__(self):","        self.put_calls = []","","    def put_object(self, Bucket, Key, Body, ContentType):","        # Almacena la información de la llamada para poder hacer aserciones","        self.put_calls.append({","            \"Bucket\": Bucket,","            \"Key\": Key,","            \"Body\": Body,","            \"ContentType\": ContentType","        })","        return {\"ResponseMetadata\": {\"HTTPStatusCode\": 200}}","","# Fixture para reemplazar el objeto s3_client del módulo con nuestro dummy","@pytest.fixture","def dummy_s3_client(monkeypatch):","    dummy = DummyS3Client()","    monkeypatch.setattr(\"download_lambda.s3_client\", dummy)","    return dummy","","# PRUEBA 1: Verificar que se genera el HTML correctamente cuando todas las páginas responden 200","def test_download_handler_success(monkeypatch, dummy_s3_client):","    # Reemplazamos requests.get con nuestra función dummy_get_success","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","    # Configuramos la variable de entorno para S3_BUCKET","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","    ","    # Ejecutamos la función de descarga sin evento (download_handler se ejecuta cuando no hay \"Records\")","    result = download_handler({}, None)","    ","    # Comprobamos que el status sea \"downloaded\"","    assert result[\"status\"] == \"downloaded\"","    ","    # Verificamos que se llamó una vez a put_object (para subir el HTML)","    assert len(dummy_s3_client.put_calls) == 1","    ","    # Verificamos que el nombre del archivo incluya la fecha de hoy y termine en \".html\"","    today = datetime.utcnow().strftime(\"%Y-%m-%d\")","    expected_filename = f\"{today}.html\"","    assert result[\"filename\"] == expected_filename","    ","    # Verificamos que en el Body se concatenó el contenido de 10 páginas","    body = dummy_s3_client.put_calls[0][\"Body\"]","    for page in range(1, 11):","        url = (f\"https://casas.mitula.com.co/find?operationType=sell&propertyType=mitula_studio_apartment&\"","               f\"geoId=mitula-CO-poblacion-0000014156&text=Bogot%C3%A1%2C++%28Cundinamarca%29&page={page}\")","        assert f\"Content from {url}\" in body","","# PRUEBA 2: Verificar comportamiento cuando una de las páginas falla (por ejemplo, page=5)","def test_download_handler_partial_failure(monkeypatch, dummy_s3_client, capsys):","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_failure)","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","    ","    result = download_handler({}, None)","    ","    # Se espera que se imprima un error para la página 5","    captured = capsys.readouterr().out","    assert \"Error al descargar la página 5\" in captured","    ","    # Aunque falle una página, la función sigue y retorna status \"downloaded\"","    assert result[\"status\"] == \"downloaded\"","","# PRUEBA 3: Verificar que si la variable de entorno S3_BUCKET no está definida se use un valor por defecto","def test_download_handler_default_bucket(monkeypatch, dummy_s3_client):","    # Eliminamos la variable de entorno S3_BUCKET (o la dejamos vacía)","    monkeypatch.delenv(\"S3_BUCKET\", raising=False)","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","    ","    result = download_handler({}, None)","    ","    # Como en el código se usa: os.environ.get(\"S3_BUCKET\", \"parcial\")","    # Si S3_BUCKET no existe, se debería usar \"parcial\" como bucket","    bucket_used = dummy_s3_client.put_calls[0][\"Bucket\"]","    assert bucket_used == \"parcial\"",""]}],[{"start":{"row":77,"column":0},"end":{"row":78,"column":0},"action":"insert","lines":["",""],"id":34},{"start":{"row":78,"column":0},"end":{"row":79,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":79,"column":0},"end":{"row":82,"column":51},"action":"insert","lines":["https://casas.mitula.com.co/find?\"","                \"operationType=sell&propertyType=mitula_studio_apartment&\"","                \"geoId=mitula-CO-poblacion-0000014156&\"","                \"text=Bogotá%2C++%28Cundinamarca%29"],"id":35}],[{"start":{"row":75,"column":64},"end":{"row":75,"column":65},"action":"insert","lines":["á"],"id":36}],[{"start":{"row":75,"column":70},"end":{"row":75,"column":71},"action":"remove","lines":["1"],"id":37},{"start":{"row":75,"column":69},"end":{"row":75,"column":70},"action":"remove","lines":["A"]},{"start":{"row":75,"column":68},"end":{"row":75,"column":69},"action":"remove","lines":["%"]},{"start":{"row":75,"column":67},"end":{"row":75,"column":68},"action":"remove","lines":["3"]},{"start":{"row":75,"column":66},"end":{"row":75,"column":67},"action":"remove","lines":["C"]}],[{"start":{"row":75,"column":65},"end":{"row":75,"column":66},"action":"remove","lines":["%"],"id":38}],[{"start":{"row":79,"column":0},"end":{"row":82,"column":51},"action":"remove","lines":["https://casas.mitula.com.co/find?\"","                \"operationType=sell&propertyType=mitula_studio_apartment&\"","                \"geoId=mitula-CO-poblacion-0000014156&\"","                \"text=Bogotá%2C++%28Cundinamarca%29"],"id":39},{"start":{"row":78,"column":0},"end":{"row":79,"column":0},"action":"remove","lines":["",""]}],[{"start":{"row":104,"column":33},"end":{"row":104,"column":34},"action":"insert","lines":["s"],"id":40}],[{"start":{"row":104,"column":33},"end":{"row":104,"column":34},"action":"remove","lines":["s"],"id":41}],[{"start":{"row":104,"column":34},"end":{"row":104,"column":35},"action":"insert","lines":["s"],"id":42}],[{"start":{"row":101,"column":68},"end":{"row":101,"column":69},"action":"insert","lines":["s"],"id":43}],[{"start":{"row":0,"column":0},"end":{"row":105,"column":0},"action":"remove","lines":["import sys","import os","# Insertamos la carpeta raíz al inicio de sys.path","sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\")))","","import json","import pytest","from datetime import datetime","","# Ahora sí podemos importar la función desde download_lambda.py","from download_lambda import download_handler","","# Creamos una clase dummy para simular la respuesta de requests.get","class DummyResponse:","    def __init__(self, status_code, text):","        self.status_code = status_code","        self.text = text","","# Función dummy que simula una respuesta exitosa (200)","def dummy_get_success(url, headers=None):","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","# Función dummy que simula una respuesta fallida (404) en una página específica","def dummy_get_failure(url, headers=None):","    if \"page=5\" in url:","        return DummyResponse(404, \"Not Found\")","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","# Creamos una clase dummy para simular el cliente S3","class DummyS3Client:","    def __init__(self):","        self.put_calls = []","","    def put_object(self, Bucket, Key, Body, ContentType):","        # Almacena la información de la llamada para poder hacer aserciones","        self.put_calls.append({","            \"Bucket\": Bucket,","            \"Key\": Key,","            \"Body\": Body,","            \"ContentType\": ContentType","        })","        return {\"ResponseMetadata\": {\"HTTPStatusCode\": 200}}","","# Fixture para reemplazar el objeto s3_client del módulo con nuestro dummy","@pytest.fixture","def dummy_s3_client(monkeypatch):","    dummy = DummyS3Client()","    monkeypatch.setattr(\"download_lambda.s3_client\", dummy)","    return dummy","","# PRUEBA 1: Verificar que se genera el HTML correctamente cuando todas las páginas responden 200","def test_download_handler_success(monkeypatch, dummy_s3_client):","    # Reemplazamos requests.get con nuestra función dummy_get_success","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","    # Configuramos la variable de entorno para S3_BUCKET","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","    ","    # Ejecutamos la función de descarga sin evento (download_handler se ejecuta cuando no hay \"Records\")","    result = download_handler({}, None)","    ","    # Comprobamos que el status sea \"downloaded\"","    assert result[\"status\"] == \"downloaded\"","    ","    # Verificamos que se llamó una vez a put_object (para subir el HTML)","    assert len(dummy_s3_client.put_calls) == 1","    ","    # Verificamos que el nombre del archivo incluya la fecha de hoy y termine en \".html\"","    today = datetime.utcnow().strftime(\"%Y-%m-%d\")","    expected_filename = f\"{today}.html\"","    assert result[\"filename\"] == expected_filename","    ","    # Verificamos que en el Body se concatenó el contenido de 10 páginas","    body = dummy_s3_client.put_calls[0][\"Body\"]","    for page in range(1, 11):","        url = (f\"https://casas.mitula.com.co/find?operationType=sell&propertyType=mitula_studio_apartment&\"","               f\"geoId=mitula-CO-poblacion-0000014156&text=Bogotá%2C++%28Cundinamarca%29&page={page}\")","        assert f\"Content from {url}\" in body","","","# PRUEBA 2: Verificar comportamiento cuando una de las páginas falla (por ejemplo, page=5)","def test_download_handler_partial_failure(monkeypatch, dummy_s3_client, capsys):","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_failure)","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","    ","    result = download_handler({}, None)","    ","    # Se espera que se imprima un error para la página 5","    captured = capsys.readouterr().out","    assert \"Error al descargar la página 5\" in captured","    ","    # Aunque falle una página, la función sigue y retorna status \"downloaded\"","    assert result[\"status\"] == \"downloaded\"","","# PRUEBA 3: Verificar que si la variable de entorno S3_BUCKET no está definida se use un valor por defecto","def test_download_handler_default_bucket(monkeypatch, dummy_s3_client):","    # Eliminamos la variable de entorno S3_BUCKET (o la dejamos vacía)","    monkeypatch.delenv(\"S3_BUCKET\", raising=False)","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","    ","    result = download_handler({}, None)","    ","    # Como en el código se usa: os.environ.get(\"S3_BUCKET\", \"parcials\")","    # Si S3_BUCKET no existe, se debería usar \"parcial\" como bucket","    bucket_used = dummy_s3_client.put_calls[0][\"Bucket\"]","    assert bucket_used == \"parcials\"",""],"id":44}],[{"start":{"row":0,"column":0},"end":{"row":120,"column":0},"action":"insert","lines":["import sys","import os","","# Insertamos la carpeta raíz al inicio de sys.path","sys.path.insert(","    0,","    os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))",")","","import json","import pytest","from datetime import datetime","","# Ahora sí podemos importar la función desde download_lambda.py","from download_lambda import download_handler","","","class DummyResponse:","    \"\"\"Clase dummy para simular la respuesta de requests.get.\"\"\"","    def __init__(self, status_code, text):","        self.status_code = status_code","        self.text = text","","","def dummy_get_success(url, headers=None):","    \"\"\"Función dummy que simula una respuesta exitosa (200).\"\"\"","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","","def dummy_get_failure(url, headers=None):","    \"\"\"","    Función dummy que simula una respuesta fallida (404) en la página 5.","    \"\"\"","    if \"page=5\" in url:","        return DummyResponse(404, \"Not Found\")","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","","class DummyS3Client:","    \"\"\"Clase dummy para simular el cliente S3.\"\"\"","    def __init__(self):","        self.put_calls = []","","    def put_object(self, Bucket, Key, Body, ContentType):","        \"\"\"","        Almacena la información de la llamada para poder hacer aserciones.","        \"\"\"","        self.put_calls.append({","            \"Bucket\": Bucket,","            \"Key\": Key,","            \"Body\": Body,","            \"ContentType\": ContentType,","        })","        return {\"ResponseMetadata\": {\"HTTPStatusCode\": 200}}","","","@pytest.fixture","def dummy_s3_client(monkeypatch):","    \"\"\"","    Fixture para reemplazar el objeto s3_client del módulo con","    nuestro dummy.","    \"\"\"","    dummy = DummyS3Client()","    monkeypatch.setattr(\"download_lambda.s3_client\", dummy)","    return dummy","","","def test_download_handler_success(monkeypatch, dummy_s3_client):","    \"\"\"","    PRUEBA 1: Verificar que se genera el HTML correctamente cuando","    todas las páginas responden 200.","    \"\"\"","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","","    result = download_handler({}, None)","    assert result[\"status\"] == \"downloaded\"","    assert len(dummy_s3_client.put_calls) == 1","","    today = datetime.utcnow().strftime(\"%Y-%m-%d\")","    expected_filename = f\"{today}.html\"","    assert result[\"filename\"] == expected_filename","","    body = dummy_s3_client.put_calls[0][\"Body\"]","    for page in range(1, 11):","        url = (","            \"https://casas.mitula.com.co/find?\"","            \"operationType=sell&propertyType=mitula_studio_apartment&\"","            \"geoId=mitula-CO-poblacion-0000014156&\"","            \"text=Bogot%C3%A1%2C++%28Cundinamarca%29&page={}\"","        ).format(page)","        assert f\"Content from {url}\" in body","","","def test_download_handler_partial_failure(monkeypatch, dummy_s3_client,","                                          capsys):","    \"\"\"","    PRUEBA 2: Verificar el comportamiento cuando una de las páginas falla","    (por ejemplo, page=5).","    \"\"\"","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_failure)","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","","    result = download_handler({}, None)","    captured = capsys.readouterr().out","    assert \"Error al descargar la página 5\" in captured","    assert result[\"status\"] == \"downloaded\"","","","def test_download_handler_default_bucket(monkeypatch, dummy_s3_client):","    \"\"\"","    PRUEBA 3: Verificar que si la variable de entorno S3_BUCKET no está","    definida se use un valor por defecto.","    \"\"\"","    monkeypatch.delenv(\"S3_BUCKET\", raising=False)","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","","    result = download_handler({}, None)","    bucket_used = dummy_s3_client.put_calls[0][\"Bucket\"]","    assert bucket_used == \"parcials\"",""],"id":45}],[{"start":{"row":0,"column":0},"end":{"row":120,"column":0},"action":"remove","lines":["import sys","import os","","# Insertamos la carpeta raíz al inicio de sys.path","sys.path.insert(","    0,","    os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))",")","","import json","import pytest","from datetime import datetime","","# Ahora sí podemos importar la función desde download_lambda.py","from download_lambda import download_handler","","","class DummyResponse:","    \"\"\"Clase dummy para simular la respuesta de requests.get.\"\"\"","    def __init__(self, status_code, text):","        self.status_code = status_code","        self.text = text","","","def dummy_get_success(url, headers=None):","    \"\"\"Función dummy que simula una respuesta exitosa (200).\"\"\"","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","","def dummy_get_failure(url, headers=None):","    \"\"\"","    Función dummy que simula una respuesta fallida (404) en la página 5.","    \"\"\"","    if \"page=5\" in url:","        return DummyResponse(404, \"Not Found\")","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","","class DummyS3Client:","    \"\"\"Clase dummy para simular el cliente S3.\"\"\"","    def __init__(self):","        self.put_calls = []","","    def put_object(self, Bucket, Key, Body, ContentType):","        \"\"\"","        Almacena la información de la llamada para poder hacer aserciones.","        \"\"\"","        self.put_calls.append({","            \"Bucket\": Bucket,","            \"Key\": Key,","            \"Body\": Body,","            \"ContentType\": ContentType,","        })","        return {\"ResponseMetadata\": {\"HTTPStatusCode\": 200}}","","","@pytest.fixture","def dummy_s3_client(monkeypatch):","    \"\"\"","    Fixture para reemplazar el objeto s3_client del módulo con","    nuestro dummy.","    \"\"\"","    dummy = DummyS3Client()","    monkeypatch.setattr(\"download_lambda.s3_client\", dummy)","    return dummy","","","def test_download_handler_success(monkeypatch, dummy_s3_client):","    \"\"\"","    PRUEBA 1: Verificar que se genera el HTML correctamente cuando","    todas las páginas responden 200.","    \"\"\"","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","","    result = download_handler({}, None)","    assert result[\"status\"] == \"downloaded\"","    assert len(dummy_s3_client.put_calls) == 1","","    today = datetime.utcnow().strftime(\"%Y-%m-%d\")","    expected_filename = f\"{today}.html\"","    assert result[\"filename\"] == expected_filename","","    body = dummy_s3_client.put_calls[0][\"Body\"]","    for page in range(1, 11):","        url = (","            \"https://casas.mitula.com.co/find?\"","            \"operationType=sell&propertyType=mitula_studio_apartment&\"","            \"geoId=mitula-CO-poblacion-0000014156&\"","            \"text=Bogot%C3%A1%2C++%28Cundinamarca%29&page={}\"","        ).format(page)","        assert f\"Content from {url}\" in body","","","def test_download_handler_partial_failure(monkeypatch, dummy_s3_client,","                                          capsys):","    \"\"\"","    PRUEBA 2: Verificar el comportamiento cuando una de las páginas falla","    (por ejemplo, page=5).","    \"\"\"","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_failure)","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","","    result = download_handler({}, None)","    captured = capsys.readouterr().out","    assert \"Error al descargar la página 5\" in captured","    assert result[\"status\"] == \"downloaded\"","","","def test_download_handler_default_bucket(monkeypatch, dummy_s3_client):","    \"\"\"","    PRUEBA 3: Verificar que si la variable de entorno S3_BUCKET no está","    definida se use un valor por defecto.","    \"\"\"","    monkeypatch.delenv(\"S3_BUCKET\", raising=False)","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","","    result = download_handler({}, None)","    bucket_used = dummy_s3_client.put_calls[0][\"Bucket\"]","    assert bucket_used == \"parcials\"",""],"id":46},{"start":{"row":0,"column":0},"end":{"row":113,"column":0},"action":"insert","lines":["import os","import sys","import pytest","from datetime import datetime","","# Insertamos la carpeta raíz al inicio de sys.path para poder importar download_lambda","sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\")))","","from download_lambda import download_handler","","","class DummyResponse:","    \"\"\"Clase dummy para simular la respuesta de requests.get.\"\"\"","    def __init__(self, status_code, text):","        self.status_code = status_code","        self.text = text","","","def dummy_get_success(url, headers=None):","    \"\"\"Simula una respuesta exitosa (200) de requests.get.\"\"\"","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","","def dummy_get_failure(url, headers=None):","    \"\"\"","    Simula una respuesta fallida (404) para la página 5 y exitosa para las demás.","    \"\"\"","    if \"page=5\" in url:","        return DummyResponse(404, \"Not Found\")","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","","class DummyS3Client:","    \"\"\"Clase dummy para simular el cliente S3.\"\"\"","    def __init__(self):","        self.put_calls = []","","    def put_object(self, Bucket, Key, Body, ContentType):","        \"\"\"","        Simula la subida de un objeto a S3 y almacena los datos de la llamada.","        \"\"\"","        self.put_calls.append({","            \"Bucket\": Bucket,","            \"Key\": Key,","            \"Body\": Body,","            \"ContentType\": ContentType,","        })","        return {\"ResponseMetadata\": {\"HTTPStatusCode\": 200}}","","","@pytest.fixture","def dummy_s3_client(monkeypatch):","    \"\"\"","    Fixture que reemplaza el objeto s3_client en download_lambda por nuestro DummyS3Client.","    \"\"\"","    dummy = DummyS3Client()","    monkeypatch.setattr(\"download_lambda.s3_client\", dummy)","    return dummy","","","def test_download_handler_success(monkeypatch, dummy_s3_client):","    \"\"\"","    PRUEBA 1: Verifica que se genere el HTML correctamente cuando todas las páginas responden 200.","    \"\"\"","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","","    result = download_handler({}, None)","    assert result[\"status\"] == \"downloaded\"","    assert len(dummy_s3_client.put_calls) == 1","","    today = datetime.utcnow().strftime(\"%Y-%m-%d\")","    expected_filename = f\"{today}.html\"","    assert result[\"filename\"] == expected_filename","","    body = dummy_s3_client.put_calls[0][\"Body\"]","    for page in range(1, 11):","        url = (","            \"https://casas.mitula.com.co/find?\"","            \"operationType=sell&propertyType=mitula_studio_apartment&\"","            \"geoId=mitula-CO-poblacion-0000014156&\"","            \"text=Bogot%C3%A1%2C++%28Cundinamarca%29&page={}\"","        ).format(page)","        assert f\"Content from {url}\" in body","","","def test_download_handler_partial_failure(monkeypatch, dummy_s3_client, capsys):","    \"\"\"","    PRUEBA 2: Verifica que si una de las páginas falla (por ejemplo, page=5),","    se imprima el error y la función continúe.","    \"\"\"","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_failure)","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","","    result = download_handler({}, None)","    captured = capsys.readouterr().out","    assert \"Error al descargar la página 5\" in captured","    assert result[\"status\"] == \"downloaded\"","","","def test_download_handler_default_bucket(monkeypatch, dummy_s3_client):","    \"\"\"","    PRUEBA 3: Verifica que, si la variable de entorno S3_BUCKET no está definida,","    se use el valor por defecto (\"parcials\").","    \"\"\"","    monkeypatch.delenv(\"S3_BUCKET\", raising=False)","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","","    result = download_handler({}, None)","    # Aseguramos que el resultado también indique éxito","    assert result[\"status\"] == \"downloaded\"","    bucket_used = dummy_s3_client.put_calls[0][\"Bucket\"]","    assert bucket_used == \"parcials\"",""]}],[{"start":{"row":0,"column":0},"end":{"row":113,"column":0},"action":"remove","lines":["import os","import sys","import pytest","from datetime import datetime","","# Insertamos la carpeta raíz al inicio de sys.path para poder importar download_lambda","sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\")))","","from download_lambda import download_handler","","","class DummyResponse:","    \"\"\"Clase dummy para simular la respuesta de requests.get.\"\"\"","    def __init__(self, status_code, text):","        self.status_code = status_code","        self.text = text","","","def dummy_get_success(url, headers=None):","    \"\"\"Simula una respuesta exitosa (200) de requests.get.\"\"\"","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","","def dummy_get_failure(url, headers=None):","    \"\"\"","    Simula una respuesta fallida (404) para la página 5 y exitosa para las demás.","    \"\"\"","    if \"page=5\" in url:","        return DummyResponse(404, \"Not Found\")","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","","class DummyS3Client:","    \"\"\"Clase dummy para simular el cliente S3.\"\"\"","    def __init__(self):","        self.put_calls = []","","    def put_object(self, Bucket, Key, Body, ContentType):","        \"\"\"","        Simula la subida de un objeto a S3 y almacena los datos de la llamada.","        \"\"\"","        self.put_calls.append({","            \"Bucket\": Bucket,","            \"Key\": Key,","            \"Body\": Body,","            \"ContentType\": ContentType,","        })","        return {\"ResponseMetadata\": {\"HTTPStatusCode\": 200}}","","","@pytest.fixture","def dummy_s3_client(monkeypatch):","    \"\"\"","    Fixture que reemplaza el objeto s3_client en download_lambda por nuestro DummyS3Client.","    \"\"\"","    dummy = DummyS3Client()","    monkeypatch.setattr(\"download_lambda.s3_client\", dummy)","    return dummy","","","def test_download_handler_success(monkeypatch, dummy_s3_client):","    \"\"\"","    PRUEBA 1: Verifica que se genere el HTML correctamente cuando todas las páginas responden 200.","    \"\"\"","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","","    result = download_handler({}, None)","    assert result[\"status\"] == \"downloaded\"","    assert len(dummy_s3_client.put_calls) == 1","","    today = datetime.utcnow().strftime(\"%Y-%m-%d\")","    expected_filename = f\"{today}.html\"","    assert result[\"filename\"] == expected_filename","","    body = dummy_s3_client.put_calls[0][\"Body\"]","    for page in range(1, 11):","        url = (","            \"https://casas.mitula.com.co/find?\"","            \"operationType=sell&propertyType=mitula_studio_apartment&\"","            \"geoId=mitula-CO-poblacion-0000014156&\"","            \"text=Bogot%C3%A1%2C++%28Cundinamarca%29&page={}\"","        ).format(page)","        assert f\"Content from {url}\" in body","","","def test_download_handler_partial_failure(monkeypatch, dummy_s3_client, capsys):","    \"\"\"","    PRUEBA 2: Verifica que si una de las páginas falla (por ejemplo, page=5),","    se imprima el error y la función continúe.","    \"\"\"","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_failure)","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","","    result = download_handler({}, None)","    captured = capsys.readouterr().out","    assert \"Error al descargar la página 5\" in captured","    assert result[\"status\"] == \"downloaded\"","","","def test_download_handler_default_bucket(monkeypatch, dummy_s3_client):","    \"\"\"","    PRUEBA 3: Verifica que, si la variable de entorno S3_BUCKET no está definida,","    se use el valor por defecto (\"parcials\").","    \"\"\"","    monkeypatch.delenv(\"S3_BUCKET\", raising=False)","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","","    result = download_handler({}, None)","    # Aseguramos que el resultado también indique éxito","    assert result[\"status\"] == \"downloaded\"","    bucket_used = dummy_s3_client.put_calls[0][\"Bucket\"]","    assert bucket_used == \"parcials\"",""],"id":47}],[{"start":{"row":0,"column":0},"end":{"row":131,"column":0},"action":"insert","lines":["import os","import sys","import pytest","from datetime import datetime","","# Insertamos la carpeta raíz al inicio de sys.path para poder","# importar download_lambda.","sys.path.insert(","    0,","    os.path.abspath(os.path.join(os.path.dirname(__file__), \"..\"))",")","","from download_lambda import download_handler  # noqa: E402","","","class DummyResponse:","    \"\"\"Clase dummy para simular la respuesta de requests.get.\"\"\"","    def __init__(self, status_code, text):","        self.status_code = status_code","        self.text = text","","","def dummy_get_success(url, headers=None):","    \"\"\"","    Simula una respuesta exitosa (200) para requests.get.","    Retorna un HTML con \"Content from {url}\".","    \"\"\"","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","","def dummy_get_failure(url, headers=None):","    \"\"\"","    Simula una respuesta fallida (404) en la página 5.","    Las demás páginas devuelven estado 200.","    \"\"\"","    if \"page=5\" in url:","        return DummyResponse(404, \"Not Found\")","    return DummyResponse(200, f\"<html>Content from {url}</html>\")","","","class DummyS3Client:","    \"\"\"","    Clase dummy para simular el cliente S3.","    Almacena en self.put_calls la info de cada put_object.","    \"\"\"","    def __init__(self):","        self.put_calls = []","","    def put_object(self, Bucket, Key, Body, ContentType):","        \"\"\"Simula la subida de un objeto a S3.\"\"\"","        self.put_calls.append({","            \"Bucket\": Bucket,","            \"Key\": Key,","            \"Body\": Body,","            \"ContentType\": ContentType,","        })","        return {\"ResponseMetadata\": {\"HTTPStatusCode\": 200}}","","","@pytest.fixture","def dummy_s3_client(monkeypatch):","    \"\"\"","    Fixture que reemplaza el s3_client de download_lambda por DummyS3Client.","    \"\"\"","    dummy = DummyS3Client()","    monkeypatch.setattr(\"download_lambda.s3_client\", dummy)","    return dummy","","","def test_download_handler_success(monkeypatch, dummy_s3_client):","    \"\"\"","    PRUEBA 1:","    Verifica que se genere el HTML correctamente si todas","    las páginas responden 200.","    \"\"\"","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","","    result = download_handler({}, None)","    assert result[\"status\"] == \"downloaded\"","    assert len(dummy_s3_client.put_calls) == 1","","    today = datetime.utcnow().strftime(\"%Y-%m-%d\")","    expected_filename = f\"{today}.html\"","    assert result[\"filename\"] == expected_filename","","    body = dummy_s3_client.put_calls[0][\"Body\"]","","    # Construimos la URL base dividida en varias líneas","    # para no exceder 79 caracteres.","    url_base = (","        \"https://casas.mitula.com.co/find?\"","        \"operationType=sell&propertyType=mitula_studio_apartment&\"","        \"geoId=mitula-CO-poblacion-0000014156&\"","        \"text=Bogot%C3%A1%2C++%28Cundinamarca%29&page={}\"","    )","","    for page in range(1, 11):","        url = url_base.format(page)","        assert f\"Content from {url}\" in body","","","def test_download_handler_partial_failure(monkeypatch, dummy_s3_client,","                                          capsys):","    \"\"\"","    PRUEBA 2:","    Verifica que si una página falla (page=5),","    se imprima un error y la función continúe.","    \"\"\"","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_failure)","    monkeypatch.setenv(\"S3_BUCKET\", \"parcials\")","","    result = download_handler({}, None)","    captured = capsys.readouterr().out","    assert \"Error al descargar la página 5\" in captured","    assert result[\"status\"] == \"downloaded\"","","","def test_download_handler_default_bucket(monkeypatch, dummy_s3_client):","    \"\"\"","    PRUEBA 3:","    Verifica que si no hay S3_BUCKET, se use \"parcials\" por defecto.","    \"\"\"","    monkeypatch.delenv(\"S3_BUCKET\", raising=False)","    monkeypatch.setattr(\"download_lambda.requests.get\", dummy_get_success)","","    result = download_handler({}, None)","    assert result[\"status\"] == \"downloaded\"","","    bucket_used = dummy_s3_client.put_calls[0][\"Bucket\"]","    assert bucket_used == \"parcials\"",""],"id":48}],[{"start":{"row":131,"column":0},"end":{"row":131,"column":1},"action":"insert","lines":["r"],"id":50},{"start":{"row":131,"column":1},"end":{"row":131,"column":2},"action":"insert","lines":["f"]}],[{"start":{"row":131,"column":1},"end":{"row":131,"column":2},"action":"remove","lines":["f"],"id":51},{"start":{"row":131,"column":0},"end":{"row":131,"column":1},"action":"remove","lines":["r"]}]]},"ace":{"folds":[],"scrolltop":1685,"scrollleft":0,"selection":{"start":{"row":131,"column":0},"end":{"row":131,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":0,"state":"start","mode":"ace/mode/python"}},"timestamp":1741698462041,"hash":"e39d26f0b90af53ea5ab2f87dfad0e992d035ddd"}